#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

&lt { tapping-term-ms = <200>; };

conditional_layers { compatible = "zmk,conditional-layers"; };

behaviors {
    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        label = "HOMEROW_MODS_LEFT_HAND";
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        hold-trigger-key-positions = <30 18 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 39 40>;
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        label = "HOMEROW_MODS_RIGHT_HAND";
        bindings = <&kp>, <&kp>;

        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        flavor = "balanced";
        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };

    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping_term_ms = <135>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESCAPE>;
        };

        combo_bksp {
            timeout-ms = <50>;
            key-positions = <10 9>;
            bindings = <&kp BACKSPACE>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        combo_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <25 26 27>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <21 22>;
        };

        combo_rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <33 34 32>;
        };

        exclm {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dllr {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percnt {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
        };

        str {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        leftparen {
            bindings = <&kp LPAR>;
            key-positions = <9 21>;
        };

        rparen {
            bindings = <&kp RPAR>;
            key-positions = <10 22>;
        };

        layout_switch {
            bindings = <&tog 4>;
            key-positions = <36 37 40 41>;
        };

        system_reset {
            bindings = <&sys_reset>;
            key-positions = <3 4 5 14>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <15 16 17 26>;
        };

        system_layer_combo {
            bindings = <&mo 3>;
            key-positions = <36 37 38>;
        };

        caps_words_combo {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp TAB     &kp Q              &kp W                &kp E             &kp R         &kp T        &kp Y      &kp U            &kp I      &kp O                 &kp P            &kp BACKSPACE
&kp LSHIFT  &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D   &kp F         &kp G        &kp H      &kp J            &kp K      &hmr RIGHT_CONTROL L  &hmr RSHFT SEMI  &kp SINGLE_QUOTE
&kp LCTRL   &kp Z              &kp X                &kp C             &kp V         &kp B        &kp N      &kp M            &kp COMMA  &kp DOT               &kp FSLH         &kp ESC
                                                    &mt LEFT_ALT TAB  &kp LEFT_GUI  &kp ENTER    &kp SPACE  &lt 1 BACKSPACE  &lt 2 ESC
            >;
        };

        numsym_layer {
            bindings = <
&trans  &kp N1                    &kp N2                  &kp N3            &kp N4                &kp N5                   &kp N6            &kp N7             &kp N8          &kp N9           &kp N0     &trans
&trans  &hml LEFT_SHIFT NUMBER_6  &hml LEFT_CONTROL PLUS  &hml LEFT_ALT N8  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp LEFT          &kp DOWN           &kp UP          &kp RIGHT        &kp SQT    &trans
&trans  &kp BACKSLASH             &kp MINUS               &kp EQUAL         &kp SLASH             &kp ASTERISK             &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp GRAVE  &trans
                                                          &trans            &trans                &trans                   &trans            &trans             &trans
            >;
        };

        fun_layer {
            bindings = <
&trans  &kp F1    &kp F2           &kp F3            &kp F4         &kp F5          &kp F6        &kp F7         &kp F8       &kp F9   &kp F10  &trans
&trans  &kp LEFT  &kp LC(C_RW)     &kp C_PLAY_PAUSE  &kp C_FF       &kp C_MUTE      &kp HOME      &kp PAGE_DOWN  &kp PAGE_UP  &kp END  &kp F11  &trans
&trans  &kp INS   &kp PRINTSCREEN  &kp SCROLLLOCK    &kp PAGE_DOWN  &kp C_VOL_DN    &kp C_VOL_UP  &trans         &trans       &trans   &kp F12  &trans
                                   &trans            &trans         &trans          &trans        &trans         &trans
            >;
        };

        sys_layer {
            bindings = <
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &trans          &none   &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &none   &none   &none   &none   &trans
&trans  &bootloader   &sys_reset      &none         &none         &none           &none   &trans  &trans  &trans  &trans  &trans
                                      &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
